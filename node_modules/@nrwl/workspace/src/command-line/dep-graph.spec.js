"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const affected_apps_1 = require("./affected-apps");
const dep_graph_1 = require("./dep-graph");
const deps_calculator_1 = require("./deps-calculator");
const fs = require("fs");
describe('dep-graph', () => {
    beforeEach(() => {
        spyOn(fs, 'writeFileSync');
    });
    describe('getNodeProps', () => {
        const deps = {
            app1: [],
            app2: [
                {
                    projectName: 'lib1',
                    type: deps_calculator_1.DependencyType.es6Import
                }
            ],
            lib1: [],
            lib2: [
                {
                    projectName: 'lib1',
                    type: deps_calculator_1.DependencyType.es6Import
                }
            ],
            lib3: []
        };
        const projects = [
            {
                name: 'app1',
                root: 'apps/app1',
                type: affected_apps_1.ProjectType.app,
                tags: [],
                implicitDependencies: [],
                architect: {},
                files: [],
                fileMTimes: {}
            },
            {
                name: 'app2',
                root: 'apps/app2',
                type: affected_apps_1.ProjectType.app,
                tags: [],
                implicitDependencies: [],
                architect: {},
                files: [],
                fileMTimes: {}
            },
            {
                name: 'lib1',
                root: 'libs/lib1',
                type: affected_apps_1.ProjectType.lib,
                tags: [],
                implicitDependencies: [],
                architect: {},
                files: [],
                fileMTimes: {}
            },
            {
                name: 'lib2',
                root: 'libs/lib2',
                type: affected_apps_1.ProjectType.lib,
                tags: [],
                implicitDependencies: [],
                architect: {},
                files: [],
                fileMTimes: {}
            },
            {
                name: 'lib3',
                root: 'libs/lib3',
                type: affected_apps_1.ProjectType.lib,
                tags: [],
                implicitDependencies: [],
                architect: {},
                files: [],
                fileMTimes: {}
            }
        ];
        const graphvizOptions = {
            graph: [],
            nodes: {
                [affected_apps_1.ProjectType.app]: {
                    [dep_graph_1.NodeEdgeVariant.default]: {},
                    [dep_graph_1.NodeEdgeVariant.highlighted]: {}
                },
                [affected_apps_1.ProjectType.lib]: {
                    [dep_graph_1.NodeEdgeVariant.default]: {},
                    [dep_graph_1.NodeEdgeVariant.highlighted]: {
                        color: 'red'
                    }
                }
            },
            edges: {
                [deps_calculator_1.DependencyType.es6Import]: {
                    [dep_graph_1.NodeEdgeVariant.default]: {},
                    [dep_graph_1.NodeEdgeVariant.highlighted]: {}
                },
                [deps_calculator_1.DependencyType.loadChildren]: {
                    [dep_graph_1.NodeEdgeVariant.default]: {},
                    [dep_graph_1.NodeEdgeVariant.highlighted]: {}
                },
                [deps_calculator_1.DependencyType.implicit]: {
                    [dep_graph_1.NodeEdgeVariant.default]: {},
                    [dep_graph_1.NodeEdgeVariant.highlighted]: {}
                }
            }
        };
        it('should generate the default dot output', () => {
            const resp = dep_graph_1.createGraphviz(graphvizOptions, deps, projects, {});
            expect(resp).toContain('"app1";');
            expect(resp).toContain('"app2";');
            expect(resp).toContain('"lib1";');
            expect(resp).toContain('"lib2";');
            expect(resp).toContain('"lib3";');
            expect(resp).toContain('"app2" -> "lib1";');
            expect(resp).toContain('"lib2" -> "lib1";');
        });
        it('should add style for highlighted nodes', () => {
            const modifiedOptions = Object.assign({}, graphvizOptions, {
                nodes: Object.assign({}, graphvizOptions.nodes, {
                    [affected_apps_1.ProjectType.lib]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {},
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {
                            color: 'red'
                        }
                    }
                })
            });
            const resp = dep_graph_1.createGraphviz(modifiedOptions, deps, projects, {
                lib1: true
            });
            expect(resp).toContain('"lib1" [ color = "red" ];');
        });
        it('should add style for highlighted edges', () => {
            const modifiedOptions = Object.assign({}, graphvizOptions, {
                nodes: Object.assign({}, graphvizOptions.nodes, {
                    [affected_apps_1.ProjectType.lib]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {},
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {}
                    }
                }),
                edges: Object.assign({}, graphvizOptions.edges, { [deps_calculator_1.DependencyType.es6Import]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {},
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {
                            color: 'blue'
                        }
                    } })
            });
            const resp = dep_graph_1.createGraphviz(modifiedOptions, deps, projects, {
                lib1: true
            });
            expect(resp).toContain('"lib1";');
            expect(resp).not.toContain('"lib1" [ color = "red" ];');
            expect(resp).toContain('"app2" -> "lib1" [ color = "blue" ];');
            expect(resp).toContain('"lib2" -> "lib1" [ color = "blue" ];');
        });
        it('should style all variants correctly', () => {
            const newDeps = {
                app1: [
                    {
                        projectName: 'lib1',
                        type: deps_calculator_1.DependencyType.es6Import
                    }
                ],
                app2: [
                    {
                        projectName: 'lib1',
                        type: deps_calculator_1.DependencyType.loadChildren
                    }
                ],
                lib1: [],
                lib2: [
                    {
                        projectName: 'lib1',
                        type: deps_calculator_1.DependencyType.implicit
                    }
                ],
                lib3: []
            };
            const modifiedOptions = Object.assign({}, graphvizOptions, {
                nodes: {
                    [affected_apps_1.ProjectType.app]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {
                            color: 'app-def'
                        },
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {
                            color: 'app-highlight'
                        }
                    },
                    [affected_apps_1.ProjectType.lib]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {
                            color: 'lib-def'
                        },
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {
                            color: 'lib-highlight'
                        }
                    }
                },
                edges: {
                    [deps_calculator_1.DependencyType.es6Import]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {
                            color: 'es6Import-def'
                        },
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {
                            color: 'es6Import-highlight'
                        }
                    },
                    [deps_calculator_1.DependencyType.loadChildren]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {
                            color: 'loadChildren-def'
                        },
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {
                            color: 'loadChildren-highlight'
                        }
                    },
                    [deps_calculator_1.DependencyType.implicit]: {
                        [dep_graph_1.NodeEdgeVariant.default]: {
                            color: 'implicit-def'
                        },
                        [dep_graph_1.NodeEdgeVariant.highlighted]: {
                            color: 'implicit-highlight'
                        }
                    }
                }
            });
            const resp = dep_graph_1.createGraphviz(modifiedOptions, newDeps, projects, {
                app1: true,
                app2: true,
                lib1: true
            });
            expect(resp).toContain('"app1" [ color = "app-highlight" ];');
            expect(resp).toContain('"app2" [ color = "app-highlight" ];');
            expect(resp).toContain('"lib1" [ color = "lib-highlight" ];');
            expect(resp).toContain('"lib2" [ color = "lib-def" ];');
            expect(resp).toContain('"lib3" [ color = "lib-def" ];');
            expect(resp).toContain('"app1" -> "lib1" [ color = "es6Import-highlight" ];');
            expect(resp).toContain('"app2" -> "lib1" [ color = "loadChildren-highlight" ];');
            expect(resp).toContain('"lib2" -> "lib1" [ color = "implicit-highlight" ];');
            const respNoCriticalPath = dep_graph_1.createGraphviz(modifiedOptions, newDeps, projects, {});
            expect(respNoCriticalPath).toContain('"app1" -> "lib1" [ color = "es6Import-def" ];');
            expect(respNoCriticalPath).toContain('"app2" -> "lib1" [ color = "loadChildren-def" ];');
            expect(respNoCriticalPath).toContain('"lib2" -> "lib1" [ color = "implicit-def" ];');
        });
    });
});
