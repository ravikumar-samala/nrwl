"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
function handleErrors(logger, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield fn();
        }
        catch (err) {
            if (err instanceof schematics_1.UnsuccessfulWorkflowExecution) {
                logger.fatal('The Schematic workflow failed. See above.');
            }
            else {
                logger.fatal(err.message);
            }
            return 1;
        }
    });
}
exports.handleErrors = handleErrors;
function convertToCamelCase(parsed) {
    return Object.keys(parsed).reduce((m, c) => (Object.assign({}, m, { [camelCase(c)]: parsed[c] })), {});
}
exports.convertToCamelCase = convertToCamelCase;
function camelCase(input) {
    if (input.indexOf('-') > 1) {
        return input
            .toLowerCase()
            .replace(/-(.)/g, (match, group1) => group1.toUpperCase());
    }
    else {
        return input;
    }
}
function coerceTypes(opts, schema) {
    Object.keys(opts).forEach(k => {
        if (schema.properties[k] && schema.properties[k].type == 'boolean') {
            opts[k] = opts[k] === true || opts[k] === 'true';
        }
        else if (schema.properties[k] && schema.properties[k].type == 'number') {
            opts[k] = Number(opts[k]);
        }
    });
    return opts;
}
exports.coerceTypes = coerceTypes;
function convertAliases(opts, schema) {
    return Object.keys(opts).reduce((acc, k) => {
        if (schema.properties[k]) {
            acc[k] = opts[k];
        }
        else {
            const found = Object.entries(schema.properties).find(([_, d]) => d.alias === k);
            if (found) {
                acc[found[0]] = opts[k];
            }
        }
        return acc;
    }, {});
}
exports.convertAliases = convertAliases;
