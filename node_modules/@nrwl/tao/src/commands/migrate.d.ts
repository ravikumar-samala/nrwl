export declare type MigrationsJson = {
    version: string;
    schematics?: {
        [name: string]: {
            version: string;
        };
    };
    packageJsonUpdates?: {
        [name: string]: {
            version: string;
            packages: {
                [p: string]: {
                    version: string;
                    ifPackageInstalled?: string;
                };
            };
        };
    };
};
export declare class Migrator {
    private readonly versions;
    private readonly fetch;
    private readonly from;
    private readonly to;
    constructor(opts: {
        versions: (p: string) => string;
        fetch: (p: string, v: string) => Promise<MigrationsJson>;
        from: {
            [p: string]: string;
        };
        to: {
            [p: string]: string;
        };
    });
    updatePackageJson(targetPackage: string, targetVersion: string): Promise<{
        packageJson: any;
        migrations: any;
    }>;
    private _createMigrateJson;
    private _updatePackageJson;
    private collapsePackages;
}
export declare function migrate(root: string, args: string[]): Promise<any>;
