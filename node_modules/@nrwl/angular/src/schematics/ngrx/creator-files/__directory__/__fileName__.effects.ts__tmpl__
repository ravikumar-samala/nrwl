import { Injectable } from '@angular/core';
import { createEffect, Actions } from '@ngrx/effects';
import { DataPersistence } from '@nrwl/angular';

import { <%= className %>PartialState } from './<%= fileName %>.reducer';
import * as <%= className %>Actions from './<%= fileName %>.actions';

@Injectable()
export class <%= className %>Effects {
 load<%= className %>$ = createEffect(() => this.dataPersistence.fetch(<%= className %>Actions.load<%= className %>, {
   run: (action: ReturnType<typeof <%= className %>Actions.load<%= className %>>, state: <%= className %>PartialState) => {
     // Your custom service 'load' logic goes here. For now just return a success action...
     return <%= className %>Actions.load<%= className %>Success({ <%= propertyName %>: [] });
   },

   onError: (action: ReturnType<typeof <%= className %>Actions.load<%= className %>>, error) => {
     console.error('Error', error);
     return <%= className %>Actions.load<%= className %>Failure({ error });
   }
  })
 );

 constructor(
   private actions$: Actions,
   private dataPersistence: DataPersistence<<%= className %>PartialState>) { }
}
