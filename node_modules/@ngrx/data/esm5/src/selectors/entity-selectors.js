import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { createSelector } from '@ngrx/store';
import { ENTITY_CACHE_SELECTOR_TOKEN, createEntityCacheSelector, } from './entity-cache-selector';
import { ENTITY_CACHE_NAME } from '../reducers/constants';
import { EntityCollectionCreator } from '../reducers/entity-collection-creator';
/** Creates EntitySelector functions for entity collections. */
var EntitySelectorsFactory = /** @class */ (function () {
    function EntitySelectorsFactory(entityCollectionCreator, selectEntityCache) {
        this.entityCollectionCreator =
            entityCollectionCreator || new EntityCollectionCreator();
        this.selectEntityCache =
            selectEntityCache || createEntityCacheSelector(ENTITY_CACHE_NAME);
    }
    /**
     * Create the NgRx selector from the store root to the named collection,
     * e.g. from Object to Heroes.
     * @param entityName the name of the collection
     */
    EntitySelectorsFactory.prototype.createCollectionSelector = function (entityName) {
        var _this = this;
        var getCollection = function (cache) {
            if (cache === void 0) { cache = {}; }
            return ((cache[entityName] ||
                _this.entityCollectionCreator.create(entityName)));
        };
        return createSelector(this.selectEntityCache, getCollection);
    };
    // createCollectionSelectors implementation
    EntitySelectorsFactory.prototype.createCollectionSelectors = function (metadataOrName) {
        var metadata = typeof metadataOrName === 'string'
            ? { entityName: metadataOrName }
            : metadataOrName;
        var selectKeys = function (c) { return c.ids; };
        var selectEntityMap = function (c) { return c.entities; };
        var selectEntities = createSelector(selectKeys, selectEntityMap, function (keys, entities) {
            return keys.map(function (key) { return entities[key]; });
        });
        var selectCount = createSelector(selectKeys, function (keys) { return keys.length; });
        // EntityCollection selectors that go beyond the ngrx/entity/EntityState selectors
        var selectFilter = function (c) { return c.filter; };
        var filterFn = metadata.filterFn;
        var selectFilteredEntities = filterFn
            ? createSelector(selectEntities, selectFilter, function (entities, pattern) { return filterFn(entities, pattern); })
            : selectEntities;
        var selectLoaded = function (c) { return c.loaded; };
        var selectLoading = function (c) { return c.loading; };
        var selectChangeState = function (c) { return c.changeState; };
        // Create collection selectors for each `additionalCollectionState` property.
        // These all extend from `selectCollection`
        var extra = metadata.additionalCollectionState || {};
        var extraSelectors = {};
        Object.keys(extra).forEach(function (k) {
            extraSelectors['select' + k[0].toUpperCase() + k.slice(1)] = function (c) { return c[k]; };
        });
        return tslib_1.__assign({ selectCount: selectCount,
            selectEntities: selectEntities,
            selectEntityMap: selectEntityMap,
            selectFilter: selectFilter,
            selectFilteredEntities: selectFilteredEntities,
            selectKeys: selectKeys,
            selectLoaded: selectLoaded,
            selectLoading: selectLoading,
            selectChangeState: selectChangeState }, extraSelectors);
    };
    // createCollectionSelectors implementation
    EntitySelectorsFactory.prototype.create = function (metadataOrName) {
        var metadata = typeof metadataOrName === 'string'
            ? { entityName: metadataOrName }
            : metadataOrName;
        var entityName = metadata.entityName;
        var selectCollection = this.createCollectionSelector(entityName);
        var collectionSelectors = this.createCollectionSelectors(metadata);
        var entitySelectors = {};
        Object.keys(collectionSelectors).forEach(function (k) {
            entitySelectors[k] = createSelector(selectCollection, collectionSelectors[k]);
        });
        return tslib_1.__assign({ entityName: entityName,
            selectCollection: selectCollection, selectEntityCache: this.selectEntityCache }, entitySelectors);
    };
    EntitySelectorsFactory = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Optional()),
        tslib_1.__param(1, Optional()),
        tslib_1.__param(1, Inject(ENTITY_CACHE_SELECTOR_TOKEN)),
        tslib_1.__metadata("design:paramtypes", [EntityCollectionCreator, Function])
    ], EntitySelectorsFactory);
    return EntitySelectorsFactory;
}());
export { EntitySelectorsFactory };
//# sourceMappingURL=data:application/json;base64,